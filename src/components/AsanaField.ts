import axios, { AxiosResponse } from 'axios';

interface FormData {
    name?: string;
    caseSuite: string[];
    manualTestCoverage: string;
    caseSource: string;
    generatedBy: string;
    mainTicket: string;
    manualTestEnvironment: string;
    preCondition: string;
    testStep: string;
    expectedResult: string;
    xRelease: string;
    Priority: string;
}

interface EnumOption {
    name: string;
    gid: string;
}

interface CustomField {
    name: string;
    gid: string;
    type: string;
    enum_options?: EnumOption[];
}

interface CustomFieldSetting {
    custom_field: CustomField;
}

interface CustomFieldResponse {
    data: CustomFieldSetting[];
}

interface FieldOptionGid {
    [name: string]: {
        type: string;
        enum_options?: { [name: string]: string };
    };
}

interface CustomFieldData {
    "CaseSuite": string[];
    "Manual Test Coverage": string;
    "Case Source": string;
    "Generated By": string;
    "MainTicket": string;
    "Manual Test Environment": string;
    "Pre-Condition": string;
    "Test Step": string;
    "Expected Result": string;
    "xRelease": string;
    "Manual Test Priority": string;
}

async function getCustomFieldGid(projectGid: string, apiKey: string): Promise<[FieldOptionGid, FieldOptionGid]> {
    const url = `https://app.asana.com/api/1.0/projects/${projectGid}/custom_field_settings`;
    const headers = {
        Authorization: `Bearer ${apiKey}`,
    };

    const response: AxiosResponse<CustomFieldResponse> = await axios.get(url, { headers });
    const result = response.data;

    let fieldsOptionGid: FieldOptionGid = {};
    let fieldsGid: FieldOptionGid = {};

    for (let item of result.data) {
        if (['enum', 'multi_enum'].includes(item.custom_field.type)) {
            console.log('yes');
            let enumOptions = item.custom_field.enum_options || [];
            let optionGid = enumOptions.reduce((obj, opt) => ({ ...obj, [opt.name]: opt.gid }), {});
            fieldsOptionGid[item.custom_field.name] = {
                enum_options: optionGid,
                type: item.custom_field.type,
            };
        } else {
            fieldsOptionGid[item.custom_field.name] = { type: item.custom_field.type };
        }

        fieldsGid[item.custom_field.name] = { type: item.custom_field.gid };
    }

    return [fieldsGid, fieldsOptionGid];
}

function createCustomFields(formData: FormData, fieldsGid: FieldOptionGid, fieldsOptionGid: FieldOptionGid): any {
    const customFieldData: CustomFieldData = {
        "CaseSuite": formData['caseSuite'],
        "Manual Test Coverage": formData["manualTestCoverage"],
        "Case Source": formData['caseSource'],
        "Generated By": formData['generatedBy'],
        "MainTicket": formData['mainTicket'],
        "Manual Test Environment": formData['manualTestEnvironment'],
        "Pre-Condition": formData['preCondition'],
        "Test Step": formData['testStep'],
        "Expected Result": formData['expectedResult'],
        "xRelease": formData['xRelease'],
        "Manual Test Priority": formData['Priority']

    };

    console.log("customFieldData:", customFieldData);

    let customFields: { [name: string]: any } = {};

    for (let fieldName in fieldsOptionGid) {
        const fieldOptions = fieldsOptionGid[fieldName];
        const fieldType = fieldOptions?.type || "";
        if (!(fieldName in customFieldData)) continue;

        if (fieldType === 'enum') {
            let fieldValue = customFieldData[fieldName as keyof CustomFieldData];
            if (typeof fieldValue === "string") {
                console.log(fieldOptions.enum_options);
                let enumGid = fieldOptions.enum_options?.[fieldValue] || "";
                
                if (enumGid) {
                    customFields[fieldName] = enumGid;
                }
            }
        } else if (fieldType === 'multi_enum') {
            let multiEnumValues: string[] | null = null;
            console.log(fieldOptions.enum_options);

            let fieldValue = customFieldData[fieldName as keyof CustomFieldData];
            if (typeof fieldValue === "string") {
                multiEnumValues = [fieldOptions.enum_options?.[fieldValue] || ''];
            } else if (Array.isArray(fieldValue)) {
                multiEnumValues = fieldValue.map(name => fieldOptions.enum_options?.[name] || '');
            } else {
                multiEnumValues = null;
            }

            if (multiEnumValues) {
                customFields[fieldName] = multiEnumValues;
            }
        } else {
            let textValue = customFieldData[fieldName as keyof CustomFieldData];
            if (textValue) {
                customFields[fieldName] = textValue;
            }
        }

    }

    console.log("customFields:", customFields)


    let customFieldsFinal = {
        [fieldsGid["CaseSuite"].type]: customFields['CaseSuite'],
        [fieldsGid["Manual Test Coverage"].type]: customFields["Manual Test Coverage"],
        [fieldsGid["Case Source"].type]: customFields['Case Source'],
        [fieldsGid["Generated By"].type]: customFields['Generated By'],
        [fieldsGid["MainTicket"].type]: customFields['MainTicket'],
        [fieldsGid["Manual Test Environment"].type]: customFields['Manual Test Environment'],
        [fieldsGid["Pre-Condition"].type]: customFields['Pre-Condition'],
        [fieldsGid["Test Step"].type]: customFields['Test Step'],
        [fieldsGid["Expected Result"].type]: customFields['Expected Result'],
    };

    console.log("customFieldsFinal:", customFieldsFinal);

    return customFieldsFinal;
}


export async function createAsanaTask(formData: FormData, projectGid: string, apiKey: string) {
    const task_id_pattern = /(\d+)(\/f)?$/;
    const match = formData.mainTicket.match(task_id_pattern);

    if (!match) {
        throw new Error("Please provide asana task URL");
    }

    const defect_gid = match[1];

    // Call the Asana API to get the task
    const defect_task: any = await axios.get(`https://app.asana.com/api/1.0/tasks/${defect_gid}`, {
        headers: {
            Authorization: `Bearer ${apiKey}`,
            "Asana-Enable": "new_user_task_lists,new_goal_memberships",
        },
        params: {
            opt_fields: "custom_fields,Priority",
        },
    });

    for (let field of defect_task.data.data.custom_fields) {
        if (field.gid === '1204151393723065') {  // xRelease gid
            formData.xRelease = field.display_value;
        }
        if (field.gid === '977653033713577') {  // Priority gid
            formData.Priority = field.display_value;
        }
    }

    const [fieldsGid, fieldsOptionGid] = await getCustomFieldGid(projectGid, apiKey);

    console.log([fieldsGid, fieldsOptionGid]);

    const customFields = createCustomFields(formData, fieldsGid, fieldsOptionGid);

    //let name = formData.generatedBy === "Human" ? "[MS] " + formData.name : "[MS][AI] " + formData.name;
    let name = "[MS] " + formData.name

    const result: any = await axios.post("https://app.asana.com/api/1.0/tasks", {
        data: {
          projects: [projectGid],
          name: name,
          custom_fields: customFields,
        },
      }, {
        headers: {
          Authorization: `Bearer ${apiKey}`,
          Accept: "application/json",
          "Content-Type": "application/json",
        },
      });

    return { task_url: result.data.data.permalink_url }
}
