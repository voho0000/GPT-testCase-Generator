import axios, { AxiosResponse } from 'axios';

interface FormData {
    name?: string;
    caseSuite: string;
    manualTestCoverage: string;
    caseSource: string;
    generatedBy: string;
    mainTicket: string;
    manualTestEnvironment: string;
    preCondition: string;
    testStep: string;
    expectedResult: string;
    xRelease: string;
    Priority: string;
}

interface EnumOption {
    name: string;
    gid: string;
}

interface CustomField {
    name: string;
    gid: string;
    type: string;
    enum_options?: EnumOption[];
}

interface CustomFieldSetting {
    custom_field: CustomField;
}

interface CustomFieldResponse {
    data: CustomFieldSetting[];
}

interface FieldOptionGid {
    [name: string]: {
        type: string;
        enum_options?: { [name: string]: string };
    };
}

interface CustomFieldData {
    CaseSuite: string;
    ManualTestCoverage: string;
    CaseSource: string;
    GeneratedBy: string;
    MainTicket: string;
    ManualTestEnvironment: string;
    PreCondition: string;
    TestStep: string;
    ExpectedResult: string;
    xRelease: string;
    ManualTestPriority: string;
  }

async function getCustomFieldGid(projectGid: string, apiKey: string): Promise<[FieldOptionGid, FieldOptionGid]> {
    const url = `https://app.asana.com/api/1.0/projects/${projectGid}/custom_field_settings`;
    const headers = {
        Authorization: `Bearer ${apiKey}`,
    };

    const response: AxiosResponse<CustomFieldResponse> = await axios.get(url, { headers });
    const result = response.data;

    let fieldsOptionGid: FieldOptionGid = {};
    let fieldsGid: FieldOptionGid = {};

    for (let item of result.data) {
        if (item.custom_field.type in ['enum', 'multi_enum']) {
            let enumOptions = item.custom_field.enum_options || [];
            let optionGid = enumOptions.reduce((obj, opt) => ({ ...obj, [opt.name]: opt.gid }), {});
            fieldsOptionGid[item.custom_field.name] = {
                enum_options: optionGid,
                type: item.custom_field.type,
            };
        } else {
            fieldsOptionGid[item.custom_field.name] = { type: item.custom_field.type };
        }

        fieldsGid[item.custom_field.name] = { type: item.custom_field.gid };
    }

    return [fieldsGid, fieldsOptionGid];
}

function createCustomFields(formData: FormData, fieldsGid: FieldOptionGid, fieldsOptionGid: FieldOptionGid): any {
    const customFieldData: CustomFieldData = {
        CaseSuite: formData.caseSuite,
        ManualTestCoverage: formData.manualTestCoverage,
        CaseSource: formData.caseSource,
        GeneratedBy: formData.generatedBy,
        MainTicket: formData.mainTicket,
        ManualTestEnvironment: formData.manualTestEnvironment,
        PreCondition: formData.preCondition,
        TestStep: formData.testStep,
        ExpectedResult: formData.expectedResult,
        xRelease: formData.xRelease,
        ManualTestPriority: formData.Priority,
    };

    let customFields: { [name: string]: any } = {};

    for (let fieldName in fieldsOptionGid) {
        const fieldOptions = fieldsOptionGid[fieldName];
        const fieldType = fieldOptions?.type || "";
        if (!(fieldName in customFieldData)) continue;
    
        if (fieldType === 'enum') {
            let enumGid = fieldOptions.enum_options?.[customFieldData[fieldName as keyof CustomFieldData]] || "";
            if (enumGid) {
                customFields[fieldName] = enumGid;
            }
        } else if (fieldType === 'multi_enum') {
            let multiEnumValues: string[] | null = null;

            if (typeof customFieldData[fieldName as keyof CustomFieldData] === 'string') {
                multiEnumValues = [fieldOptions.enum_options?.[customFieldData[fieldName as keyof CustomFieldData]] || ''];
            } else if (Array.isArray(customFieldData[fieldName as keyof CustomFieldData])) {
                const arrayFieldData = customFieldData[fieldName as keyof CustomFieldData] as unknown as string[];
                multiEnumValues = arrayFieldData.map(name => fieldOptions.enum_options?.[name] || '');
            } else {
                multiEnumValues = null;
            }
            
            if (multiEnumValues) {
                customFields[fieldName] = multiEnumValues;
            }
            
        } else {
            let textValue = customFieldData[fieldName as keyof CustomFieldData];
            if (textValue) {
                customFields[fieldName] = textValue;
            }
        }
    }
    

    let customFieldsFinal = {
        [fieldsGid["CaseSuite"].type]: customFields['CaseSuite'],
        [fieldsGid["Manual Test Coverage"].type]: customFields["Manual Test Coverage"],
        [fieldsGid["Case Source"].type]: customFields['Case Source'],
        [fieldsGid["Generated By"].type]: customFields['Generated By'],
        [fieldsGid["MainTicket"].type]: customFields['MainTicket'],
        [fieldsGid["Manual Test Environment"].type]: customFields['Manual Test Environment'],
        [fieldsGid["Pre-Condition"].type]: customFields['Pre-Condition'],
        [fieldsGid["Test Step"].type]: customFields['Test Step'],
        [fieldsGid["Expected Result"].type]: customFields['Expected Result'],
    };

    return customFieldsFinal;
}


async function createTask(formData: FormData, projectGid: string, apiKey: string) {
    const task_id_pattern = /(\d+)(\/f)?$/;
    const match = formData.mainTicket.match(task_id_pattern);

    if (!match) {
        throw new Error("Please provide asana task URL");
    }

    const defect_gid = match[1];

    // Call the Asana API to get the task
    const defect_task: any = await axios.get(`https://app.asana.com/api/1.0/tasks/${defect_gid}`, {
        headers: {
            Authorization: `Bearer ${apiKey}`,
            "Asana-Enable": "new_user_task_lists,new_goal_memberships",
        },
        params: {
            opt_fields: "custom_fields,Priority",
        },
    });

    for (let field of defect_task.data.custom_fields) {
        if (field.gid === '1204151393723065') {  // xRelease gid
            formData.xRelease = field.display_value;
        }
        if (field.gid === '977653033713577') {  // Priority gid
            formData.Priority = field.display_value;
        }
    }

    const [fieldsGid, fieldsOptionGid] = await getCustomFieldGid(projectGid, apiKey);

    const customFields = createCustomFields(formData, fieldsGid, fieldsOptionGid);

    let name = formData.generatedBy === "Human" ? "[MS] " + formData.name : "[MS][AI] " + formData.name;

    const result: any = await axios.post("https://app.asana.com/api/1.0/tasks", {
        projects: [projectGid],
        name: name,
        custom_fields: customFields,
    }, {
        headers: {
            Authorization: `Bearer ${apiKey}`,
        },
    });

    console.log(result.data.permalink_url);

    return result.data.permalink_url;
}
